module com.aexiz.daviz.sim.Tarry where
    
    import com.aexiz.daviz.sim.Set
    import com.aexiz.daviz.sim.Process
    
    -- (Implementation note: DUI is old name)
    data DUI = Received Channel
             | Replied Channel
             | Undefined
             | Initiator
    derive Eq DUI
    
    -- Process state and message state spaces
    type PS = (Bool, DUI, Set Channel)
    type MS = () -- token
    type RS = Bool -- decide or terminate
    
    -- State transition function (bulk send, reversed channel)
    trans :: PS -> ProcessResult RS PS MS
    -- Step 1.
    trans (True, p, n) | sizeS n > 0 = PSend s' (ch, tok) where
        s' = (False, p, n')
        n' = removeS n ch
        ch = nextS n
        tok = ()
    -- Step 2.
    trans (True, Received ch, n) | sizeS n == 0 = PSend s' (ch, tok) where
        s' = (False, Replied ch, n)
        tok = ()
    -- Step 3.
    trans (True, Initiator, n) | sizeS n == 0 = PResult True
    -- Step 4.
    trans (False, Replied _, n) | sizeS n == 0 = PResult False
    trans (False, Undefined, n) | sizeS n == 0 = PResult False
    -- Step 5.
    trans (False, Undefined, n) = PReceive f where
        f (ch, tok) = (True, Received (reverseC ch), removeS n (reverseC ch))
    trans (False, p, n) = PReceive f where
        f (ch, tok) = (True, p, n)
    -- Partial
    trans _ = error "Underspecified"
    
    procDesc :: Process -> ProcessDescription KnownNetwork RS PS MS
    procDesc i = PD init trans where
        init (n, p) | p == i =    (True, Initiator, outChannels n p)
                    | otherwise = (False, Undefined, outChannels n p)
    