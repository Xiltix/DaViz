module com.aexiz.daviz.sim.Cidon where
    
    import com.aexiz.daviz.sim.Set
    import com.aexiz.daviz.sim.Process
    
    data RRUI = Received Channel
              | Replied Channel
              | Undefined
              | Initiator
    derive Eq RRUI
    
    -- Process state and message state spaces
    data PS = PS { hasToken :: Bool
                 , state :: RRUI
                 , intention :: Maybe Channel
                 , forward :: Set Channel
                 , info :: Set Channel }
    data MS = Token | Inf
    type RS = Bool
    
    
    -- State transition function
    trans :: PS -> ProcessResult RS PS MS
    -- Step 1.
    trans (PS True (Received pa) Nothing p i) | (sizeS p) > 0 =
        PInternal [s'] where
            x = nextS p
            s' = (PS True (Received pa) (Just x) (removeS p x) (removeS i x))
    trans (PS True Initiator Nothing p i) | (sizeS p) > 0 =
        PInternal [s'] where
            x = nextS p
            s' = (PS True Initiator (Just x) (removeS p x) (removeS i x))
    -- Step 2.
    trans (PS True (Received ch) (Just x) p i) | (sizeS i) > 0 =
        PSend s' (im, Inf) where
            im = nextS i
            s' = (PS True (Received ch) (Just x) p (removeS i im))
    trans (PS True Initiator (Just x) p i) | (sizeS i) > 0 =
        PSend s' (im, Inf) where
            im = nextS i
            s' = (PS True Initiator (Just x) p (removeS i im))
    -- Step 3.
    trans (PS True (Received ch) (Just x) p i) | (sizeS i) == 0 =
        PSend s' (x, Token) where
            s' = (PS False (Received ch) (Just x) p emptyS)
    trans (PS True Initiator (Just x) p i) | (sizeS i) == 0 =
        PSend s' (x, Token) where
            s' = (PS False Initiator (Just x) p emptyS)
    -- Step 4a. (see notes)
    trans (PS True (Received ch) Nothing p i) | (sizeS p) == 0 && (sizeS i) > 0 =
    	PSend s' (im, Inf) where
            im = nextS i
            s' = (PS True (Received ch) Nothing emptyS (removeS i im))
    -- Step 4.
    trans (PS True (Received ch) Nothing p i) | (sizeS p) == 0 && (sizeS i) == 0 =
        PSend s' (ch, Token) where
            s' = (PS False (Replied ch) Nothing emptyS emptyS)
    -- Step 5.
    trans (PS True Initiator Nothing p i) | (sizeS p) == 0 && (sizeS i) == 0 =
        PResult True
    -- Step 6.
    trans (PS False (Replied ch) Nothing p i) | (sizeS p) == 0 && (sizeS i) == 0 =
        PResult False
    -- Step 7.
    trans (PS False Undefined Nothing p i) =
        PReceive f where
            f (rch, Token) = let ch = reverseC rch in (PS True (Received ch) Nothing (removeS p ch) (removeS i ch))
            f (rch, Inf) = (PS False Undefined Nothing (removeS p (reverseC rch)) i)
    -- Step 8 & 9.
    trans (PS False (Received pa) (Just x) p i) =
        PReceive f where
            f (rch, _) | (reverseC rch) == x = (PS True (Received pa) Nothing p i)
                       | otherwise = (PS False (Received pa) (Just x) (removeS p (reverseC rch)) i)
    trans (PS False Initiator (Just x) p i) =
        PReceive f where
            f (rch, _) | (reverseC rch) == x = (PS True Initiator Nothing p i)
                       | otherwise = (PS False Initiator (Just x) (removeS p (reverseC rch)) i)
    -- Step 10 & 11.
    trans (PS False (Received pa) Nothing p i) =
        PReceive f where
            f (rch, Token) = (PS True (Received pa) Nothing p i)
            f (rch, Inf) = (PS False (Received pa) Nothing (removeS p (reverseC rch)) i)
    trans (PS False Initiator Nothing p i) =
        PReceive f where
            f (rch, Token) = (PS True Initiator Nothing p i)
            f (rch, Inf) = (PS False Initiator Nothing (removeS p (reverseC rch)) i)
    -- Partial
    trans _ = error "Underspecified"
    
    procDesc :: Process -> ProcessDescription KnownNetwork RS PS MS
    procDesc i = PD init trans where
        init (n, p) | p == i =    PS True Initiator Nothing (outChannels n p) (outChannels n p)
                    | otherwise = PS False Undefined Nothing (outChannels n p) (outChannels n p)
    