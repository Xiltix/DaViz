module com.aexiz.daviz.frege.simulation.Set where
    
    import Data.Foldable
    import Data.List
    
    -- The list may contain duplicate elements
    data Set a = Ctor [a]
    derive Ord (Set a)
    instance Ord a => Eq (Set a) where
        f == g = normalS f == normalS g
        hashCode (Ctor x) = (hashCode x)
    instance ListEmpty Set where
    	empty = Ctor []
    	null (Ctor []) = True
    	null _ = False
    instance Functor Set where
        fmap f (Ctor g) = Ctor (fmap f g)
    instance Foldable Set where
        foldr f acc (Ctor g) = foldr f acc g
    instance Applicative Set where
        pure x = Ctor (pure x)
        (Ctor f) <*> (Ctor g) = Ctor (f <*> g)
    
    emptyS :: Set a
    emptyS = Ctor []
    
    nullS :: Set a -> Bool
    nullS (Ctor []) = True
    nullS _ = False
    
    singletonS :: a -> Set a
    singletonS x = Ctor [x]
    
    unionS :: Set a -> Set a -> Set a
    unionS (Ctor f) (Ctor g) = Ctor (f ++ g)
    
    flatS :: (Set (Set a)) -> Set a
    flatS s = foldr unionS emptyS s
    
    normalS :: Ord a => Set a -> [a]
    normalS (Ctor f) = sort (nub f)
    
    member :: Eq a => a -> Set a -> Bool
    member = elem
    
    sizeS :: Ord a => Set a -> Int
    sizeS = length . normalS
    
    intersectS :: Eq a => Set a -> Set a -> Set a
    intersectS f (Ctor g) = Ctor $ filter (`member` f) g
    
    diffS :: Eq a => Set a -> Set a -> Set a
    diffS (Ctor f) g = Ctor $ filter (not . flip member g) f
    
    isSubsetOf :: Ord a => Set a -> Set a -> Bool
    isSubsetOf f g = all (`member` g) f
    
    mapS ::(a -> b) -> Set a -> Set b
    mapS = fmap
    
    filterS :: (a -> Bool) -> Set a -> Set a
    filterS f (Ctor g) = Ctor (filter f g)
    
    allS :: (a -> Bool) -> Set a -> Bool
    allS f = foldr ((&&) . f) True
    
    anyS :: (a -> Bool) -> Set a -> Bool
    anyS f = foldr ((||) . f) False
    
    -- Removes the element from the set
    removeS :: Eq a => Set a -> a -> Set a
    removeS (Ctor f) e = Ctor $ filter (not . (== e)) f
    
    -- Adds an element to the set
    addS :: Set a -> a -> Set a
    addS f x = unionS f (singletonS x)
    
    -- Choose (determinisitically) some element from the set, partial function
    nextS :: Ord a => Set a -> a
    nextS = head . normalS
    
    -- Special code for glueing Java and Frege
    glueTuple2IntNormalS :: Set (Int,Int) -> [(Int,Int)]
    glueTuple2IntNormalS = normalS
    -- Special code for glueing Java and Frege
    glueIntNormalS :: Set Int -> [Int]
    glueIntNormalS = normalS
    