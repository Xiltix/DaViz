module com.aexiz.daviz.frege.simulation.Visited where
    
    import com.aexiz.daviz.frege.simulation.Set
    import com.aexiz.daviz.frege.simulation.Process
    
    data RRUI = Received Channel
             | Replied Channel
             | Undefined
             | Initiator
    derive Eq RRUI
    
    -- Process state and message state spaces
    type PS = (Maybe (Set Process), RRUI, Set Channel)
    type MS = (Set Process) -- token
    type RS = Bool -- decide or terminate
    
    -- State transition function
    trans :: PS -> ProcessResult RS PS MS
    -- procDesc (token, parent, neighbors left)
    -- Step 1.
    trans (Just m, p, n) | sizeS n > 0 = PSend s' (ch, tok) where
        s' = (Nothing, p, n')
        n' = removeS n ch
        ch = nextS n
        (f,_) = ch
        tok = addS m f
    -- Step 2.
    trans (Just m, Received ch, n) | sizeS n == 0 = PSend s' (ch, tok) where
        s' = (Nothing, Replied ch, n)
        (f,_) = ch
        tok = addS m f
    -- Step 3.
    trans (Just m, Initiator, n) | sizeS n == 0 = PResult True
    -- Step 4.
    trans (Nothing, Replied _, n) | sizeS n == 0 = PResult False
    trans (Nothing, Undefined, n) | sizeS n == 0 = PResult False
    -- Step 5.
    trans (Nothing, Undefined, n) = PReceive f where
        f (rch, tok) = (Just tok, Received ch, removeS n' ch) where
            ch = reverseC rch
            n' = filterS g n
            g (_,t) = not (member t tok)
    trans (Nothing, p, n) = PReceive f where
        f (rch, tok) = (Just tok, p, n') where
            n' = filterS g n
            g (_,t) = not (member t tok)
    -- Partial
    trans _ = error "Underspecified"
    
    procDesc :: Process -> ProcessDescription KnownNetwork RS PS MS
    procDesc i = PD init trans where
        init (n, p) | p == i =    (Just emptyS, Initiator, outChannels n p)
                    | otherwise = (Nothing, Undefined, outChannels n p)
    