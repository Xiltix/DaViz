module com.aexiz.daviz.frege.simulation.Process where
    
    import com.aexiz.daviz.frege.simulation.Set
    import com.aexiz.daviz.frege.simulation.Graph
    
    type Process = Int
    type Network = Graph Process
    type Channel = Edge Process
    type WeightFun = Channel -> Int
    
    type ChanMsg mu = (Channel, mu)
    type ChanState mu = [ChanMsg mu]
    
    -- Assumptions
    type KnownNetwork = (Network, Process)
    
    -- A process results is a non-deterministic description
    data ProcessResult tau sigma mu = 
    	PReceive (ChanMsg mu -> sigma) -- to must be process
        | PInternal [sigma]            -- must not be empty
        | PSend sigma (ChanMsg mu)     -- from must be process - Process Space (Message Space) 
        | PResult tau                  -- last result
    
    data ProcessDescription rho tau sigma mu = PD { init :: rho -> sigma
                                                  , step :: sigma -> ProcessResult tau sigma mu }
    
    -- Channel from and to
    fromC :: Channel -> Process
    fromC (p, q) = p
    toC :: Channel -> Process
    toC (p, q) = q
    
    -- Outgoing channels from process
    outChannels :: Network -> Process -> Set Channel
    outChannels = outEdges
    
    -- Reversing a channel
    reverseC :: Channel -> Channel
    reverseC (f,t) = (t,f)
    
    -- Get rid of all reverseC clutter in description
    allReverseC :: ProcessDescription rho tau sigma mu -> ProcessDescription rho tau sigma mu
    allReverseC (PD init step) = PD init step' where
        step' s = case step s of
            PReceive f -> PReceive g where
                g (rch, m) = f (reverseC rch, m)
            PInternal xs -> PInternal xs
            PSend s m -> PSend s m
            PResult t -> PResult t
    
    -- A process result with bulk sending
    data ProcessResult2 tau sigma mu = P2Receive (ChanMsg mu -> sigma) -- to must be process
                                     | P2Internal [sigma] -- must not be empty
                                     | P2Send sigma [ChanMsg mu] -- from must be process
                                     | P2Result tau -- last result
    data ProcessDescription2 rho tau sigma mu = PD2 { init :: rho -> sigma
                                                    , step :: sigma -> ProcessResult2 tau sigma mu }
    -- Convert pd2 back to pd
    pd2_to_pd :: ProcessDescription2 rho tau sigma mu -> ProcessDescription rho tau (sigma, [ChanMsg mu]) mu 
    pd2_to_pd (PD2 init step) = PD init' step' where
        init' r = (init r, [])
        step' (s, []) = case step s of
            P2Receive f -> PReceive g where
                g (rch, m) = (f (rch, m), [])
            P2Internal xs -> PInternal (map g xs) where
                g x = (x, [])
            P2Send s ms -> PInternal [(s, ms)]
            P2Result t -> PResult t
        step' (s, x:xs) = PSend (s, xs) x
    