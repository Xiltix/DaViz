module com.aexiz.daviz.frege.simulation.algorithm.wave.Tree where
    
    import com.aexiz.daviz.frege.simulation.Set
    import com.aexiz.daviz.frege.simulation.Process

    data UP = Undefined
            | Parent Channel
    derive Eq UP

    data PS = PS { neigh :: Set Channel
                 , state :: UP }
    type MS = ()
    type RS = ()

    -- State transition function
    trans :: PS -> ProcessResult RS PS MS

    -- Step 1.
    --	Scenario: I am any process that have received messages from all neighbors except one
    --	I send a message to this neighbor through the channel `p` and make it my parent
    trans (PS n Undefined) | (sizeS n) == 1 =
        PSend s' (p, ()) where
            p = nextS n
            s' = PS emptyS (Parent p)

    -- Step 2.
    --	Scenario: I am any process waiting messages from two or more neighbors processes
    --	I prepare to receive a message from one of my neighbors
    --		and I remove this channel from the waiting list
    trans (PS n Undefined) | (sizeS n) > 1 =
        PReceive f where
            f (rch, ()) = PS (removeS n (reverseC rch)) Undefined

    -- Step 3.
    --	Scenario: I have a parent process and a empty neighbors list
    --	If I receive a message from my parent I re-add this channel to my neighbors list
    --	Otherwise, I thrown an exception
    trans (PS n (Parent p)) | (sizeS n) == 0 =
        PReceive f where
            f (rch, ()) | reverseC rch == p = PS (addS n (reverseC rch)) (Parent p)
                        | otherwise = error "Unexpected message sender (3)"

	-- Step 4.
    --	Scenario: I have a parent process and a channel with my parent in my neighbors list
    --	Terminate and decided
    trans (PS n (Parent p)) | (sizeS n) == 1 =
        PResult ()
        
    -- For any unknown transitions, thrown an exception
    trans _ = error "Underspecified"
    
    procDesc :: ProcessDescription KnownNetwork RS PS MS
    procDesc = PD init trans where
        init (n, p) = PS (outChannels n p) Undefined
    