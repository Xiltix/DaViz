module com.aexiz.daviz.frege.simulation.Simulation where
    
    import com.aexiz.daviz.frege.simulation.Event
    import com.aexiz.daviz.frege.simulation.Graph
    import com.aexiz.daviz.frege.simulation.Process
    
    data Configuration tau sigma mu = Config Network (Process -> Either sigma tau) (ChanState mu)
    
    data Simulation tau sigma mu = Sim { config :: Configuration tau sigma mu
    				                   , successors :: [(Event tau sigma mu, Simulation tau sigma mu)]
                                       }
    
    -- Give an initial configuration (single initiator, centralized)
    initialConfiguration :: Network -> ProcessDescription KnownNetwork tau sigma mu -> Configuration tau sigma mu
    initialConfiguration n (PD init _) = Config n f [] where
        f p = Left (init (n, p))
    
    -- Given a configuration, we have: set of all unreceived (channel, message)s.
    unreceivedMsgs :: Configuration tau sigma mu -> Process -> [(Int, ChanMsg mu)]
    unreceivedMsgs (Config n ps ms) p = filter f (zip numerals ms) where
        f (i, ((f, t), m)) = t == p
    
    -- Given a configuration, we have: set of all (process, state)s.
    processStates :: Configuration tau sigma mu -> [(Process, sigma)]
    processStates (Config n ps _) = map g (filter f [(v, ps v) | v <- (vertices n)]) where
        f (v, Left _) = true
        f (v, Right _) = false
        g (v, Left s) = (v, s)
        g (v, Right _) = undefined
    
    -- Given a configuration, a process and a new state: we update the process mapping.
    updateState :: Configuration tau sigma mu -> Process -> sigma -> Configuration tau sigma mu
    updateState (Config n ps ms) p ns = Config n ps' ms where
        ps' i | i == p = Left ns
              | otherwise = ps i
    
    -- Given a configuration, a process and a result: we update the process mapping.
    updateResult :: Configuration tau sigma mu -> Process -> tau -> Configuration tau sigma mu
    updateResult (Config n ps ms) p t = Config n ps' ms where
        ps' i | i == p = Right t
              | otherwise = ps i
    
    -- Utils
    removeAt xs n     | null xs   = []
    removeAt (x:xs) n | n == 0    = removeAt xs (n-1)
                      | otherwise = x : removeAt xs (n-1)
    removeAt _ _                  = error "Invalid index"
    numerals :: [Int]
    numerals = 0 : (map (+1) numerals)
    
    -- Given a configuration and a channel message: we remove the channel message once.
    removeMsg :: Configuration tau sigma mu -> (Int, ChanMsg mu) -> Configuration tau sigma mu
    removeMsg (Config n ps ms) (i,_) = Config n ps (removeAt ms i)
    
    addMsg :: Configuration tau sigma mu -> ChanMsg mu -> Configuration tau sigma mu
    addMsg (Config n ps ms) m = (Config n ps (m : ms))
    
    -- Given a configuration, determine whether two processes are incident
    incidentC :: Configuration tau sigma mu -> Process -> Process -> Bool
    incidentC (Config n _ _) f t = incident n f t
    
    -- single step
    step :: Configuration tau sigma mu -> Process -> ProcessResult tau sigma mu -> [(Event tau sigma mu, Configuration tau sigma mu)]
    step c p (PReceive fun) = do
        (ichm@(_,(chm@((f,t),m)))) <- unreceivedMsgs c p
        let next = fun chm
        [(EReceive p m f next, removeMsg (updateState c p next) ichm)]
    step c p (PInternal s) = do
        next <- s
        [(EInternal p next, updateState c p next)]
    step c p (PSend next (chm@((f, t), m))) | p == f && incidentC c f t = do
        [(ESend p m t next, addMsg (updateState c p next) chm)]
    step c p (PResult t) = do
        [(EResult p t, updateResult c p t)]
    step (Config n pst chs) p _ = error "Invalid simulation"
    
    -- final implementation with non-determinisism
    transitionRelation :: Configuration tau sigma mu -> ProcessDescription rho tau sigma mu -> [(Event tau sigma mu, Configuration tau sigma mu)]
    transitionRelation c (PD _ pd) = do
        (p, st) <- processStates c
        step c p (pd st)
    
    -- temporary implementation, only at most a single successor
    simulation :: Configuration tau sigma mu -> ProcessDescription rho tau sigma mu -> Simulation tau sigma mu
    simulation st pd = Sim st (map f (transitionRelation st pd)) where
    	f (e, c) = (e, simulation c pd)
    
    