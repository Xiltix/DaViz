module com.aexiz.daviz.sim.Process where
    
    import com.aexiz.daviz.sim.Set
    import com.aexiz.daviz.sim.Graph
    
    type Process = Int
    type Network = Graph Process
    type Channel = Edge Process
    type WeightFun = Channel -> Int
    
    type ChanMsg mu = (Channel, mu)
    type ChanState mu = [ChanMsg mu]
    
    -- Assumptions
    type KnownNetwork = (Network, Process)
    
    -- A process result
    data ProcessResult tau sigma mu = 
    	  PReceive (ChanMsg mu -> sigma)      -- the received message determines next state
        | PInternal [sigma]                   -- internal non-deterministic choice (must not be empty)
        | PSend sigma (ChanMsg mu)            -- send a message, and go to next state
        | PChoose (Int -> sigma) [ChanMsg mu] -- select where to send a message to: one is chosen, and that determines the next state
        | PResult tau                         -- the process ends, and give the last result
    
    data ProcessDescription rho tau sigma mu = PD { init :: rho -> sigma
                                                  , step :: sigma -> ProcessResult tau sigma mu }
    
    -- Channel from and to
    fromC :: Channel -> Process
    fromC (p, q) = p
    toC :: Channel -> Process
    toC (p, q) = q
    
    -- Outgoing channels from process
    outChannels :: Network -> Process -> Set Channel
    outChannels = outEdges
    
    -- Reversing a channel
    reverseC :: Channel -> Channel
    reverseC (f,t) = (t,f)
    
    -- Get rid of all reverseC clutter in description
    allReverseC :: ProcessDescription rho tau sigma mu -> ProcessDescription rho tau sigma mu
    allReverseC (PD init step) = PD init step' where
        step' s = case step s of
            PReceive f -> PReceive g where
                g (rch, m) = f (reverseC rch, m)
            PInternal xs -> PInternal xs
            PSend s m -> PSend s m
            PResult t -> PResult t
            PChoose f xs -> PChoose f xs
