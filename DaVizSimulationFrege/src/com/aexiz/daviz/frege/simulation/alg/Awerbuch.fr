module com.aexiz.daviz.frege.simulation.alg.Awerbuch where
    
    import com.aexiz.daviz.frege.simulation.Set
    import com.aexiz.daviz.frege.simulation.Process
    
    data RRRUII = ReceivedUnseen Channel
                | ReceivedSeen Channel
                | Replied Channel
                | Undefined
                | InitiatorUnseen
                | InitiatorSeen
    derive Eq RRRUII
    
    -- Process state and message state spaces
    data PS = PS { hasToken :: Bool
                 , state :: RRRUII
                 , inform :: Set Channel
                 , acked :: Set Channel
                 , intended :: Maybe Channel
                 , forward :: Set Channel
                 , info :: Set Channel
                 , last :: Maybe Channel
                 , toAck :: Maybe Channel }
    data MS = Token | Inf | Ack
    type RS = Bool -- decide or terminate
    
    -- State transition function
    trans :: PS -> ProcessResult RS PS MS
    -- Step 1.
    trans (PS True p ip ir (Just tf) n w Nothing Nothing) | sizeS ip > 0 =
        PSend s' (ch, Inf) where
            s' = PS True p (removeS ip ch) (addS ir ch) (Just tf) n w Nothing Nothing
            ch = nextS ip
    -- Step 2.
    trans (PS True p ip ir (Just tf) n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS w == 0 =
        PSend s' (tf, Token) where
            s' = PS False p emptyS emptyS Nothing n w Nothing Nothing
    -- Step 3.
    trans (PS True p ip ir (Just tf) n w Nothing Nothing) | sizeS ip == 0 =
        PReceive f where
            f (rch, Ack) = let ch = reverseC rch in PS True p ip (removeS ir ch) (Just tf) n w Nothing Nothing
            f (_,_) = error "Unexpected message type (3)"
    -- Step 4.
    trans (PS True (ReceivedUnseen pa) ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n > 0 =
        PInternal [(PS True (ReceivedSeen pa) w' emptyS (Just ch) n' emptyS Nothing Nothing)] where
            ch = nextS n
            n' = removeS n ch
            w' = removeS w ch
    trans (PS True InitiatorUnseen ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n > 0 =
        PInternal [(PS True InitiatorSeen w' emptyS (Just ch) n' emptyS Nothing Nothing)] where
            ch = nextS n
            n' = removeS n ch
            w' = removeS w ch
    trans (PS True p ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n > 0 && sizeS w == 0 =
        PSend s' (ch, Token) where
            s' = PS False p emptyS emptyS Nothing n' w Nothing Nothing
            ch = nextS n
            n' = removeS n ch
    -- Step 5.
    trans (PS True (ReceivedUnseen pa) ip ir Nothing n w (Just ch) Nothing) | sizeS ip == 0 && sizeS ir == 0 =
        PInternal [(PS True (ReceivedSeen pa) w' emptyS (Just ch) n' emptyS Nothing Nothing)] where
            n' = removeS n ch
            w' = removeS w ch
    trans (PS True InitiatorUnseen ip ir Nothing n w (Just ch) Nothing) | sizeS ip == 0 && sizeS ir == 0 =
        PInternal [(PS True InitiatorSeen w' emptyS (Just ch) n' emptyS Nothing Nothing)] where
            n' = removeS n ch
            w' = removeS w ch
    trans (PS True p ip ir Nothing n w (Just ch) Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS w == 0 =
        PSend s' (ch, Token) where
            s' = PS False p emptyS emptyS Nothing n' w Nothing Nothing
            n' = removeS n ch
    -- Step 6.
    trans (PS True (ReceivedUnseen pa) ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n == 0 =
        PInternal [(PS True (Replied pa) w emptyS (Just pa) emptyS emptyS Nothing Nothing)]
    trans (PS True (ReceivedSeen pa) ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n == 0 && sizeS w == 0 =
        PSend s' (pa, Token) where
            s' = (PS False (Replied pa) emptyS emptyS Nothing emptyS emptyS Nothing Nothing)
    -- Step 7.
    trans (PS True InitiatorSeen ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n == 0 && sizeS w == 0 =
    	PResult True
    -- Step 8.
    trans (PS False (Replied _) ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n == 0 && sizeS w == 0 =
    	PResult False
    trans (PS False Undefined ip ir Nothing n w Nothing Nothing) | sizeS ip == 0 && sizeS ir == 0 && sizeS n == 0 && sizeS w == 0 =
    	PResult False
    -- Step 9 & 10.
    trans (PS False p ip ir Nothing n w m Nothing) | sizeS ip == 0 && sizeS ir == 0 =
    	PReceive f where
            -- Step 9.
            f (rch, Token) | p == Undefined = let ch = reverseC rch in
                PS True (ReceivedUnseen ch) emptyS emptyS Nothing (removeS n ch) (removeS w ch) Nothing Nothing
            f (rch, Token) | otherwise = let ch = reverseC rch in case member ch n of
                True  -> PS True p emptyS emptyS Nothing n w (Just ch) Nothing
                False -> PS True p emptyS emptyS Nothing n w Nothing Nothing
            -- Step 10.
            f (rch, Inf) = let ch = reverseC rch in PS False p emptyS emptyS Nothing (removeS n ch) w m (Just ch)
            -- Partial
            f (_,_) = error "Unexpected message type (9,10)"
    trans (PS False p ip ir Nothing n w m (Just ch)) | sizeS ip == 0 && sizeS ir == 0 =
        PSend s' (ch, Ack) where
            s' = (PS False p ip ir Nothing n w m Nothing)
    -- Partial
    trans _ = error "Underspecified"
    
    procDesc :: Process -> ProcessDescription KnownNetwork RS PS MS
    procDesc i = PD init trans where
        init (n, p) | p == i =    PS True InitiatorUnseen emptyS emptyS Nothing (outChannels n p) (outChannels n p) Nothing Nothing
                    | otherwise = PS False Undefined  emptyS emptyS Nothing (outChannels n p) (outChannels n p) Nothing Nothing
    