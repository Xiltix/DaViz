module com.aexiz.daviz.frege.simulation.algorithm.wave.TreeAck where
    
    import com.aexiz.daviz.frege.simulation.Set
    import com.aexiz.daviz.frege.simulation.Process
    
    data UPDS = Undefined
            | Parent Channel
            | Decider Channel
            | Spreader Channel
    derive Eq UPDS
    
    data PS = PS { neighbors :: Set Channel
                 , children :: Set Channel
                 , state :: UPDS }
    data MS = Info | Ack
    type RS = Bool
    
    -- State transition function
    trans :: PS -> ProcessResult RS PS MS
    -- Step 1.
    trans (PS n c Undefined) | (sizeS n) == 1 =
        PSend s' (p, Info) where
            p = nextS n
            s' = PS emptyS c (Parent p)
    -- Step 2.
    trans (PS n c Undefined) | (sizeS n) > 1 =
        PReceive f where
            f (rch, Info) = let ch = reverseC rch in PS (removeS n ch) (addS c ch) Undefined
            f _ = error "Unexpected message type (2)"
    -- Step 3 & 6.
    trans (PS n c (Parent p)) | (sizeS n) == 0 =
        PReceive f where
            -- Step 3.
            f (rch, Info) | reverseC rch == p = PS emptyS c (Decider p)
                          | otherwise = error "Unexpected message sender (6)"
            -- Step 6.
            f (rch, Ack) | reverseC rch == p = PS emptyS c (Spreader p)
                         | otherwise = error "Unexpected message sender (6)"
    -- Step 4.
    trans (PS n c (Decider p)) | (sizeS n) == 0 && (sizeS c) > 0 =
        PSend s' (k, Ack) where
            k = nextS c
            s' = PS emptyS (removeS c k) (Decider p)
    -- Step 5.
    trans (PS n c (Decider p)) | (sizeS n) == 0 && (sizeS c) == 0 =
        PResult True
    -- Step 7.
    trans (PS n c (Spreader p)) | (sizeS n) == 0 && (sizeS c) > 0 =
        PSend s' (k, Ack) where
            k = nextS c
            s' = PS emptyS (removeS c k) (Spreader p)
    -- Step 8.
    trans (PS n c (Spreader p)) | (sizeS n) == 0 && (sizeS c) == 0 =
        PResult False
    -- Partial
    trans _ = error "Underspecified"
    
    procDesc :: ProcessDescription KnownNetwork RS PS MS
    procDesc = PD init trans where
        init (n, p) = PS (outChannels n p) emptyS Undefined
    