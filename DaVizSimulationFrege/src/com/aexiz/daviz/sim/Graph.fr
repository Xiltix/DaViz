module com.aexiz.daviz.sim.Graph where

    import com.aexiz.daviz.sim.Set
    
    -- vertex must be Eq
    type Edge vertex = (vertex,vertex)
    type Graph vertex = Set (Edge vertex) -- we implicitly store vertices
    
    -- neighboring edges outward
    outEdges :: Eq vertex => Graph vertex -> vertex -> Set (Edge vertex)
    outEdges es v = filterS f es where
        f (f,t) = f == v
    
    -- neighboring edges inward
    inEdges :: Eq vertex => Graph vertex -> vertex -> Set (Edge vertex)
    inEdges es v = filterS f es where
        f (f,t) = t == v
    
    -- list of vertices
    vertices :: Ord vertex => Graph vertex -> [vertex]
    vertices es = normalS (flatS (mapS f es)) where
        f (f,t) = unionS (singletonS f) (singletonS t)
            
    -- incidence of two vertices
    incident :: Eq vertex => Graph vertex -> vertex -> vertex -> Bool
    incident es f t = anyS h es where
        h (f',t') = f' == f && t' == t
    